1. Asynchronous JavaScript, AJAX and API
  Synchronous means code is executed line by line.
  Each line of code waits for previous line to finish. 
  Asynchronous code is executed after a task that runs in the background finishes.
  Asynchronous code is non-blocking.
  Execution doesn't wait for an asynchronous task to finish its work.
  Asynchronous programming is all about coordinating the behaviour of our program over certain period of time. 
  callback function doesn't make the code asynchronous only some function does.
  We defer an action into the future making the code asynchronous and non blocking.
  eventlistener doesn't make the code asynchronous just like callback function.

  AJAX: Asynchronous JavaScript and XML: Allows us to communicate with remote web server in an asynchronous way. With AJAX calls, we can request data from web servers dynamically. 
  API: Application Programming Interface. Piece of software that can be used by another piece of software, in order to allow application to talk to each other. 
  Example of API:
    DOM API
    Geolocation API
    Own Class API
    online(WEB) API: Application running on a server, that receive request for data, and send data back as response. We can build own web API using node.js.
    Every API that we use should have CORS set to unknown or YES.

2. Welcome to Callback Hell
  When we have one callback function inside another callback function it is called callback hell. 
  Callback hell is when we have a lot of nested callback in order to execute asynchronous task in sequence.
  The problem with callback hell is that it make our code look very messy. It make our code hard to maintain or very difficult to understand.

3. Promises and the Fetch API
  Fetch function immediately returns a promise.
  Promise: An object that is used as a placeholder for the future result of an asynchronous operation.
  Promise is a container for an asynchronous delivered value. 
  A container for a future value. 
  With promises we no longer need to rely on event and callback passed into asynchronous function to handle asynchronous result.
  Instead of nesting callback, we can chain promises for a sequence of asynchronous operations escaping callback hell.
  Promises are ES6 feature. 
  Since promises work with asynchronous operation they are time sensative so they change over time. so they can be in different state. 
  The promises lifecyle:
  PENDING
  SETTLED
    FULLFILLED
    REJECTED
  Promises doesn't get rid of callback but get rid of callback hell.

4. Chaining Promises
  success or fullfilled value is returned from the return so in the next method we can access it. 
  Always return the promise and then handle it outside by simply continuing the chain. 

5. Asynchronous Behind the Scence
  Javascript runtime is a container which include all the different pieces that are necessary to execute javascript code. Heart of javascript runtime is engine. In javascript engine code are executed and the object are stored in memory. 
  Everything related to the DOM isn't really part of javascript but of the Web API, it's in the webAPI the asynchronous task related to the Dom will run. Asynchronous task runs on the WEB API environment of the browser. If the image is loading in the Synchronous way it will be loading in the callstack. If we want to do something after the task is loaded we need to listen to load event.
  How does the event look work?
  It looks into the callstack and determine whether it's empty or not except for global context.In case the stack is empty it will take the first callback from the callback queue and put in the callstack to be executed this is called event loop tick. It has a important task of doing the corelation between the callback in the callback queue and callstack. Event loop decide when each callback is executed. Event loop does the orchestration of the entire javascript runtime. 
  In the nutshell the Web API environment the callback queue and event loop all together make it possible that asynchronous code can be executed in a non blocking way even with one thread.
  With promises things work in the slightly different way when the fetch is done callback related to the fetch i.e then method do actually not go into the callback queue. callback of the promises have a special queue for themselves which is called microtasks queue. Microtasks queue has the priority over the callback queue. After the callback have been taken from the callback queue the event loop will check if there are any callbacks in the microtask queue. If there are it will run all of them before it will run any more callbacks from regular callback queue. Microtask can cut in line before every other callback queue.

6. Building a simple promise
  promise constructor take exactly one argument that is called executor function. As soon as the promise constructor run it will automatically execute the executor function. Executor function takes two argument resolve and reject function. 
  Promisifying means to convert callback based asynchronous behaviour to promise based. 

7. Consuming Promises with Async_Await
  Asynchronous function is a function that will basically keep running in the background while the code that inside of it, when function is done it automatically returns a promise.
  await keyword is basically used to wait for the result of the promise. Stopping execution in an async function isn't a problem because this function is runnning asynchronous in the background. 




  

  
  

